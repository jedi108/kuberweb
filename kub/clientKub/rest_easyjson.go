// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package clientKub

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub(in *jlexer.Lexer, out *Token) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub(out *jwriter.Writer, in Token) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Token) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Token) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Token) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Token) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub(l, v)
}
func easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub1(in *jlexer.Lexer, out *RestClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BaseUrl":
			out.BaseUrl = string(in.String())
		case "Token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub1(out *jwriter.Writer, in RestClient) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BaseUrl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseUrl))
	}
	{
		const prefix string = ",\"Token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RestClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RestClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RestClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RestClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub1(l, v)
}
func easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub2(in *jlexer.Lexer, out *ResponseAuth) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jweToken":
			out.JweToken = string(in.String())
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]string, 0, 4)
					} else {
						out.Errors = []string{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Errors = append(out.Errors, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub2(out *jwriter.Writer, in ResponseAuth) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jweToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JweToken))
	}
	{
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Errors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Errors {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseAuth) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseAuth) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseAuth) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseAuth) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub2(l, v)
}
func easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub3(in *jlexer.Lexer, out *LoginStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "headerPresent":
			out.HeaderPresent = bool(in.Bool())
		case "httpsMode":
			out.HttpsMode = bool(in.Bool())
		case "tokenPresent":
			out.TokenPresent = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub3(out *jwriter.Writer, in LoginStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"headerPresent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HeaderPresent))
	}
	{
		const prefix string = ",\"httpsMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HttpsMode))
	}
	{
		const prefix string = ",\"tokenPresent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TokenPresent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub3(l, v)
}
func easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub4(in *jlexer.Lexer, out *Jar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub4(out *jwriter.Writer, in Jar) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Jar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Jar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDfb66c62EncodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Jar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Jar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDfb66c62DecodeGitBetfavoritCfVadimTsurkovKuberwebKubClientKub4(l, v)
}
