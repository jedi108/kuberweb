// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package deployments

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "desiredReplicas":
			out.DesiredReplicas = uint(in.Uint())
		case "actualReplicas":
			out.ActualReplicas = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"desiredReplicas\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.DesiredReplicas))
	}
	{
		const prefix string = ",\"actualReplicas\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ActualReplicas))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments(l, v)
}
func easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments1(in *jlexer.Lexer, out *Pods) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "current":
			out.Current = uint(in.Uint())
		case "running":
			out.Running = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments1(out *jwriter.Writer, in Pods) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"current\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Current))
	}
	{
		const prefix string = ",\"running\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Running))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pods) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pods) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pods) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pods) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments1(l, v)
}
func easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments2(in *jlexer.Lexer, out *ObjectMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments2(out *jwriter.Writer, in ObjectMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments2(l, v)
}
func easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments3(in *jlexer.Lexer, out *Deployments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "deployments":
			if in.IsNull() {
				in.Skip()
				out.Deployments = nil
			} else {
				in.Delim('[')
				if out.Deployments == nil {
					if !in.IsDelim(']') {
						out.Deployments = make([]Deployment, 0, 2)
					} else {
						out.Deployments = []Deployment{}
					}
				} else {
					out.Deployments = (out.Deployments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Deployment
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Deployments = append(out.Deployments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Status).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments3(out *jwriter.Writer, in Deployments) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"deployments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Deployments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Deployments {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Raw((v3).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Status).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Deployments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Deployments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Deployments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Deployments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments3(l, v)
}
func easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments4(in *jlexer.Lexer, out *Deployment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "objectMeta":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ObjectMeta).UnmarshalJSON(data))
			}
		case "pods":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Pods).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments4(out *jwriter.Writer, in Deployment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"objectMeta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ObjectMeta).MarshalJSON())
	}
	{
		const prefix string = ",\"pods\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Pods).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Deployment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Deployment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16721522EncodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Deployment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Deployment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16721522DecodeGitBetfavoritCfVadimTsurkovKuberwebKubDomainDeployments4(l, v)
}
